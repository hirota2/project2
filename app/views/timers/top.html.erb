<h1>pomodo</h1>
<div class="text-center">
  <div id="timer-display">
    <p>現在の状態: <span id="timer-status">
    <%= case @timer.status
      when 0 then '作業前'
      when 1 then '作業中'
      when 2 then '休憩中'
      else '作業前'
      end %>
    </span></p>
    <p>残り時間: <span id="remaining-time"><%= @timer.work_duration || 25 %>分00秒</span></p>
    <%= button_to '開始', timers_start_path, method: :post, class: "shadow-lg bg-blue-500 shadow-blue-500/50 text-white rounded px-2 py-1", id: 'toggle-timer-button' %>
    <p>タイマー: <span id="regular-timer">0h 00m</span></p>
    <%= button_to 'リセット', timers_start_path, method: :post, class: "shadow-lg bg-blue-500 shadow-blue-500/50 text-white rounded px-2 py-1", id: 'reset-timer-button' %>
  </div>
</div>
<script>
  let timerInterval;
  let isWorkTime = true; // 作業時間か休憩時間かを追跡
  let isTimerRunning = false; // タイマーが動作中かどうかを追跡
  let defaultWorkDuration = 25 * 60; // 作業時間  25分
  let defaultBreakDuration = 5 * 60; // 休憩時間  5分
  let remainingTime = defaultWorkDuration; // 残り時間の初期化
  let lastTimestamp = null;
  let duration = 0;
  let elapsedTime = 0;  // 停止時に経過した時間を保存
  let regularDuration = 0; // 通常タイマー（0秒から始まる）
  duration = defaultWorkDuration;

  document.getElementById("toggle-timer-button").addEventListener("click", function(event) {
    event.preventDefault();
    if (isTimerRunning) {
      stopTimer(); // タイマーを停止
    } else {
      startTimer(); // タイマーを再開
      
    }
  });

  document.getElementById("reset-timer-button").addEventListener("click", function(event) {
    event.preventDefault();
    isTimerRunning = false;
    lastTimestamp = 0; // タイムスタンプをリセット（次回スタート時に新しいタイムスタンプを取得）
    resetTimerDisplay(); // タイマーをリセット
    document.getElementById("toggle-timer-button").textContent = "開始";
    isTimerRunning = false;
  });


  // 通常タイマーの表示更新
  function updateRegularTimerDisplay() {
    const hours = Math.floor(regularDuration / 3600); // 時間部分
    const minutes = Math.floor((regularDuration % 3600) / 60); // 分部分
    document.getElementById("regular-timer").textContent = `${hours}h ${minutes.toString().padStart(2, '0')}m`;
  }
  
  function startTimer() {
    isTimerRunning = true;
    document.getElementById("toggle-timer-button").textContent = "停止";

    function updateTimer(timestamp) {
        if (!isTimerRunning) return; // タイマーが停止中なら処理を中断

        if (!lastTimestamp) lastTimestamp = timestamp; // 最初のタイムスタンプを保存
        const deltaTime = (timestamp - lastTimestamp) / 1000; // 時間差（秒単位）
        lastTimestamp = timestamp; // 次の更新のためにタイムスタンプを記録

        regularDuration += deltaTime; // 通常タイマーの経過時間を加算
        duration -= deltaTime; // 残り時間を減らす

        // 通常タイマーの更新
        updateRegularTimerDisplay();

        if (duration <= 0) {
        isWorkTime = !isWorkTime; // 作業と休憩を切り替える
        document.getElementById("timer-status").textContent = isWorkTime ? '作業中' : '休憩中';
        duration = isWorkTime ? defaultWorkDuration : defaultBreakDuration; // 新しい残り時間をセット
        alert(isWorkTime ? "休憩終了、作業時間を開始します" : "作業終了、休憩時間を開始します");
        startTimer(); // 再起動
        return;
        }

        remainingTime = duration; // 残り時間を更新
        const minutes = Math.floor(duration / 60); // 残り時間の分を計算
        const seconds = Math.floor(duration % 60); // 残り時間の秒を計算
        document.getElementById("remaining-time").textContent = `${minutes}分${seconds.toString().padStart(2, '0')}秒`;

        // 次のフレームで再びタイマーを更新
        if (isTimerRunning) {
        requestAnimationFrame(updateTimer); // 次のフレームでupdateTimerを再度呼び出す
        }
    }

    // 最初にタイマーを開始
    requestAnimationFrame(updateTimer); // 最初のタイマー更新をリクエスト
    document.getElementById("timer-status").textContent = isWorkTime ? '作業中' : '休憩中';
  }

  function stopTimer() {
    isTimerRunning = false; // タイマーを停止するためにフラグを false に設定
    lastTimestamp = 0; // タイムスタンプをリセット（次回スタート時に新しいタイムスタンプを取得）
    document.getElementById("toggle-timer-button").textContent = "再開"; 
  }

  document.getElementById("reset-timer-button").addEventListener("click", function(event) {
    event.preventDefault();
    resetTimerDisplay(); // リセット時に状態を戻す
  });

// リセット時の表示更新
function resetTimerDisplay() {
  remainingTime = defaultWorkDuration; // 残り時間を作業時間にリセット
  duration = defaultWorkDuration; // `duration`も作業時間にリセット
  lastTimestamp = null; // タイムスタンプをリセット
  isTimerRunning = false; // タイマーを停止状態に
  isWorkTime = true; // 作業時間から開始するようにリセット（休憩中にリセット押しても大丈夫）
  document.getElementById("toggle-timer-button").textContent = "開始"; // ボタンを「開始」に変更
  document.getElementById("timer-status").textContent = "作業前"; // タイマーの状態を作業前に戻す

  // 時間表示を「作業前」に戻す
  document.getElementById("remaining-time").textContent = "25分00秒";
  clearInterval(timerInterval); // タイマーを停止
}





// 合計時間の表示更新
function updateRegularTimerDisplay() {
  const totalTime = regularDuration; // 開始を押してからの時間（合計時間）
  const hours = Math.floor(totalTime / 3600); // 合計時間の時間部分
  const minutes = Math.floor((totalTime % 3600) / 60); // 合計時間の分部分
  document.getElementById("regular-timer").textContent = `${hours}h ${minutes.toString().padStart(2, '0')}m`;
}
</script>